generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./data/sqlite.db"
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  password             String
  role                 UserRole              @default(EMPLOYEE)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  settings             UserSetting[]
  workLogs             workLog[]
  projectAssignments   ProjectToUser[]
  managedProjects      Project[]             @relation("ProjectManager")
  clocks               clock[]
  agentLeaves          LeaveRequest[]        @relation("Agent")
  requestedLeaves      LeaveRequest[]        @relation("Requester")
  overtimes            Overtime[]
  scheduledWorks       ScheduledWork[]
  signedAttendance     AttendanceSignature[] @relation("SignedAttendance")
  attendanceSignatures AttendanceSignature[] @relation("AttendanceSigner")
  signedOvertime       OvertimeSignature[]   @relation("SignedOvertime")
  overtimeSignatures   OvertimeSignature[]   @relation("OvertimeSigner")
  pushSubscriptions    PushSubscription[]
}

model clock {
  id                String    @id @default(cuid())
  userId            String
  type              String
  timestamp         DateTime  @default(now())
  ipAddress         String?
  macAddress        String?
  userAgent         String?
  deviceInfo        String?
  isEdited          Boolean   @default(false)
  editReason        String?
  editedBy          String?
  editedAt          DateTime?
  editIpAddress     String?
  ipWhitelisted     Boolean   @default(false)
  needsIpReview     Boolean   @default(false)
  ipReviewed        Boolean   @default(false)
  ipReviewedBy      String?
  ipReviewedAt      DateTime?
  ipReviewNote      String?
  originalTimestamp DateTime?
  isDeleted         Boolean   @default(false)
  deletedBy         String?
  deletedAt         DateTime?
  deleteReason      String?
  deleteIpAddress   String?
  user              User      @relation(fields: [userId], references: [id])
}

model workLog {
  id                String    @id @default(cuid())
  userId            String
  projectId         String?
  startTime         DateTime
  endTime           DateTime?
  projectCode       String
  projectName       String
  category          String
  content           String
  isOvertime        Boolean   @default(false)
  isEdited          Boolean   @default(false)
  editReason        String?
  editedBy          String?
  editedAt          DateTime?
  editIpAddress     String?
  originalStartTime DateTime?
  originalEndTime   DateTime?
  project           Project?  @relation(fields: [projectId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
}

model WorkCategory {
  id          String   @id @default(cuid())
  categoryId  String   @unique
  title       String
  content     String
  icon        String?
  description String?
  colorBg     String
  colorText   String
  colorBorder String
  colorAccent String
  isActive    Boolean  @default(true)
  isSystem    Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ScheduledWork {
  id                 String   @id @default(cuid())
  userId             String
  projectId          String?
  projectCode        String
  projectName        String
  category           String
  content            String
  priority           Int      @default(0)
  isCompleted        Boolean  @default(false)
  workType           WorkType @default(SCHEDULED)
  scheduledStartDate DateTime
  scheduledEndDate   DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  project            Project? @relation(fields: [projectId], references: [id])
  user               User     @relation(fields: [userId], references: [id])
}

model LeaveRequest {
  id            String      @id @default(cuid())
  requesterId   String
  agentId       String
  status        LeaveStatus @default(PENDING_AGENT)
  leaveType     LeaveType   @default(PERSONAL)
  reason        String
  startDate     DateTime
  endDate       DateTime
  startTime     String      @default("09:00") // 請假開始時間 HH:mm
  endTime       String      @default("18:00") // 請假結束時間 HH:mm
  totalHours    Float       @default(0)       // 總請假時數
  agentApproved Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  agent         User        @relation("Agent", fields: [agentId], references: [id])
  requester     User        @relation("Requester", fields: [requesterId], references: [id])
}

model Overtime {
  id              String    @id @default(cuid())
  userId          String
  startTime       DateTime
  endTime         DateTime?
  reason          String?
  status          String    @default("PENDING")
  startIpAddress  String?
  startMacAddress String?
  startUserAgent  String?
  startDeviceInfo String?
  endIpAddress    String?
  endMacAddress   String?
  endUserAgent    String?
  endDeviceInfo   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])
}

model Project {
  id             String          @id @default(cuid())
  code           String          @unique
  name           String
  description    String?
  category       String
  status         String          @default("ACTIVE")
  managerId      String
  contactId      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Contact        Contact?        @relation(fields: [contactId], references: [id])
  manager        User            @relation("ProjectManager", fields: [managerId], references: [id])
  userAssignments ProjectToUser[]
  workLogs       workLog[]
  scheduledWorks ScheduledWork[]
}

model Contact {
  id          String      @id @default(cuid())
  companyName String
  address     String
  phone       String
  contactName String
  createdAt   DateTime    @default(now())
  type        ContactType @default(CONTACT)
  updatedAt   DateTime    @updatedAt
  notes       String?
  Project     Project[]
}

model AttendanceSignature {
  id        String   @id @default(cuid())
  userId    String
  date      String
  signedBy  String
  signedAt  DateTime @default(now())
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("SignedAttendance", fields: [userId], references: [id])
  signer    User     @relation("AttendanceSigner", fields: [signedBy], references: [id])

  @@unique([userId, date, signedBy])
}

model OvertimeSignature {
  id        String   @id @default(cuid())
  userId    String
  date      String
  signedBy  String
  signedAt  DateTime @default(now())
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("SignedOvertime", fields: [userId], references: [id])
  signer    User     @relation("OvertimeSigner", fields: [signedBy], references: [id])

  @@unique([userId, date, signedBy])
}

model Holiday {
  id          String      @id @default(cuid())
  date        String      @unique
  name        String
  type        HolidayType
  isHoliday   Boolean     @default(true)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UserSetting {
  id        String     @id @default(cuid())
  userId    String
  key       SettingKey
  value     String
  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])

  @@unique([userId, key])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  auth      String
  p256dh    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, endpoint])
}

model ProjectToUser {
  projectId String
  userId    String
  assignedAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

model WorkTimeSettings {
  id                  Int      @id @default(1)
  normalWorkStart     String   @default("09:00")
  normalWorkEnd       String   @default("18:00")
  lunchBreakStart     String   @default("12:30")
  lunchBreakEnd       String   @default("13:30")
  overtimeStart       String   @default("18:00")
  minimumOvertimeUnit Int      @default(30)
  updatedAt          DateTime @updatedAt
}

enum UserRole {
  ADMIN
  WEB_ADMIN
  EMPLOYEE
}

enum LeaveStatus {
  PENDING_AGENT
  AGENT_REJECTED
  PENDING_ADMIN
  ADMIN_REJECTED
  APPROVED
}

enum LeaveType {
  PERSONAL     // 事假
  SICK         // 病假
  ANNUAL       // 特休
  OFFICIAL     // 公假
  FUNERAL      // 喪假
  MARRIAGE     // 婚假
  MATERNITY    // 產假
  PATERNITY    // 陪產假
  OTHER        // 其他
}

enum HolidayType {
  NATIONAL_HOLIDAY
  WEEKEND
  SPECIAL_HOLIDAY
  MAKEUP_WORKDAY
  TRANSFER_HOLIDAY
  OTHER
}

enum ContactType {
  CONTACT
  SUPPLIER
  CUSTOMER
  BUILDER
}

enum SettingKey {
  USE_CLASSIC_LAYOUT
  ENABLE_NOTIFICATIONS
  DARK_MODE
  COMPACT_VIEW
  AUTO_CLOCK_OUT
}

enum WorkType {
  SCHEDULED
  URGENT
}

model IpWhitelist {
  id          String   @id @default(cuid())
  ipAddress   String   @unique
  description String?
  location    String?
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  @@map("ip_whitelist")
}
