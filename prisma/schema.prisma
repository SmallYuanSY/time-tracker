generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN       // 管理員
  WEB_ADMIN   // 網頁管理
  EMPLOYEE    // 員工
}

enum LeaveStatus {
  PENDING_AGENT   // 等待代理人審核
  AGENT_REJECTED  // 代理人拒絕
  PENDING_ADMIN   // 等待管理員審核
  ADMIN_REJECTED  // 管理員拒絕
  APPROVED        // 已批准
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  password        String
  name            String?
  role            UserRole       @default(EMPLOYEE)
  createdAt       DateTime       @default(now())
  agentLeaves     LeaveRequest[] @relation("Agent")
  requestedLeaves LeaveRequest[] @relation("Requester")
  overtimes       Overtime[]
  projects        Project[]
  clocks          clock[]
  workLogs        workLog[]
}

model clock {
  id        String   @id @default(cuid())
  userId    String
  type      String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model workLog {
  id          String    @id @default(cuid())
  userId      String
  projectId   String?
  startTime   DateTime
  endTime     DateTime?
  projectCode String
  projectName String
  category    String
  content     String
  project     Project?  @relation(fields: [projectId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model LeaveRequest {
  id            String   @id @default(cuid())
  requesterId   String
  agentId       String
  status        LeaveStatus @default(PENDING_AGENT)
  reason        String
  startDate     DateTime
  endDate       DateTime
  agentApproved Boolean  @default(false) // 代理人是否已批准
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  agent         User     @relation("Agent", fields: [agentId], references: [id])
  requester     User     @relation("Requester", fields: [requesterId], references: [id])
}

model Overtime {
  id        String    @id @default(cuid())
  userId    String
  startTime DateTime
  endTime   DateTime?
  reason    String?
  status    String    @default("PENDING")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
}

model Project {
  id          String    @id @default(cuid())
  code        String    @unique
  name        String
  description String?
  category    String
  status      String    @default("ACTIVE")
  managerId   String
  contactId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Contact     Contact?  @relation(fields: [contactId], references: [id])
  manager     User      @relation(fields: [managerId], references: [id])
  workLogs    workLog[]
}

model Contact {
  id          String    @id @default(cuid())
  companyName String
  address     String
  phone       String
  contactName String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  notes       String?
  Project     Project[]
}
